responses: &API_RESPONSES
  200: &HTTP_200_OK
    description: Request succeeded.
  400: &HTTP_400_BAD_REQUEST
    description: Bad request. API specific parameters are incorrect or missing.
  404: &HTTP_404_NOT_FOUND
    description: Not found. The requested resource doesn't exist.
  418: &HTTP_418_I_AM_TEAPOT
    description: Improper usage of the resource.

swagger: '2.0'

info:
  description: 'This API provides interaction between OSM and the SHIELD components. Some of the functionality provided are the proxying of MSPL for configuration towards specific vNSFs.</p>'
  version: 0.1.0
  title: vNSFO API
  termsOfService: ''
  contact:
    email: carolina.fernandez@i2cat.net
  license:
    name: License - TBD
    url: 'http://TBD'

host: TBD

basePath: /

tags:
  - name: common
    description: Common operations
  - name: nfvi
    description: Deployment data
    externalDocs:
      description: D3.1
      url: 'https://www.shield-h2020.eu/documents/project-deliverables/SHIELD_D3.1_Specifications,_Design_and_Architecture_for_the_vNSF_Ecosystem_v1.0.pdf'
  - name: ns
    description: NS operations
    externalDocs:
      description: OSMr2 API
      url: 'https://osm.etsi.org/wikipub/images/2/24/Osm-r1-so-rest-api-guide.pdf'
  - name: package
    description: Package operations
    externalDocs:
      description: ''
      url: 'n/a'
  - name: vim
    description: VIM operations
    externalDocs:
      description: OSMr2 API
      url: 'https://osm.etsi.org/wikipub/images/2/24/Osm-r1-so-rest-api-guide.pdf'
  - name: vnsf
    description: vNSF operations
    externalDocs:
      description: OSMr2 API
      url: 'https://osm.etsi.org/wikipub/images/2/24/Osm-r1-so-rest-api-guide.pdf'

schemes:
  - https

paths:
  /:
    get:
      tags:
        - common
      summary: Lists all API methods
      description: >-
        <p>All available REST methods are provided through this method.</p>
      operationId: getEntryPoints
      produces:
        - application/json
      responses:
        200:
          description: "Request succeeded"
          schema:
            $ref: "#/definitions/EndPoints"
        <<: *API_RESPONSES

  /nfvi/flowtable:
    get:
      tags:
        - nfvi
      summary: Provides flow tables in network devices
      description: >-
        <p>TBD. Provides the contents of the flow tables of the SDN controller.</p>
      operationId: getDevicesFlowtable
      produces:
        - application/json
      responses: *API_RESPONSES
  /nfvi/topology:
    get:
      tags:
        - nfvi
      summary: Provides network topology
      description: >-
        <p>TBD. Returns the topology of the network as known to the VIM.</p>
      operationId: getNetworkTopology
      produces:
        - application/json
      responses: *API_RESPONSES
  /nfvi/nodes:
    get:
      tags:
        - nfvi
      summary: Provides physical nodes from NFVI
      description: >-
        <p>TBD. Provides the list of active physical nodes in the NFVI.</p>
      operationId: getDeployedPhysicalNodes
      produces:
        - application/json
      responses: *API_RESPONSES

  /ns/config:
    get:
      tags:
        - ns
      summary: Provides available NSs
      description: >-
        <p>Returns the available NSs.</p>
      operationId: getAvailableNss
      produces:
        - application/json
      responses:
        200:
          description: "Request succeeded"
          schema:
            $ref: "#/definitions/ConfigNssOutput"
        <<: *API_RESPONSES

  /package/onboard:
    post:
      tags:
        - package
      summary: Onboards package into vNSFO
      description: >-
        <p>Uploads the package for a NS or vNSF into the vNSFO.</p>
      operationId: onboardPackage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        description: The body of the request
        required: true
        schema:
          $ref: '#/definitions/PackageOnboardedInput'
      responses:
        200:
          description: "Request succeeded"
          schema:
            $ref: "#/definitions/PackageOnboardedOutput"
        <<: *API_RESPONSES
  /package/remove/{vnsf_name}:
    delete:
      tags:
        - package
      summary: Removes package from vNSFO
      description: >-
        <p>Removes the package of a NS or vNSF from the vNSFO.</p>
      operationId: removePackage
      produces:
        - application/json
      parameters:
        - name: vnsf_name
          in: path
          required: true
          type: string
      responses: *API_RESPONSES

  /vim/vnsf_image:
    post:
      tags:
        - vim
      summary: Registers vNSF image into the VIM
      description: >-
        <p>TBD. Uploads the image of a vNSF into the VIM.</p>
      operationId: registerVnsfImage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        description: The body of the request
        required: true
        schema:
          $ref: '#/definitions/VimRegisterImageInput'
      responses:
        200:
          description: "Request succeeded"
          schema:
            $ref: "#/definitions/VimRegisterImageOutput"
        <<: *API_RESPONSES

  /vnsf/running:
    get:
      tags:
        - vnsf
      summary: Provides the running vNSFs
      description: >-
        <p>Returns the instantiated vNSFs.</p>
      operationId: getDeployedVnsfs
      produces:
        - application/json
      responses:
        200:
          description: "Request succeeded"
          schema:
            $ref: "#/definitions/RunningVnsfOutput"
        <<: *API_RESPONSES
  /vnsf/running/{tenant}:
    get:
      tags:
        - vnsf
      summary: Provides the deployed vNSFs per tenant
      description: >-
        <p>TBD. Returns the deployed vNSFs per tenant.</p>
      operationId: getDeployedVnsfsPerTenant
      produces:
        - application/json
      parameters:
        - name: tenant
          in: path
          required: true
          type: string
      responses: *API_RESPONSES
  /vnsf/{vnsf}/action/{action}:
    get:
      tags:
        - vnsf
      summary: Fetches the status of a previously executed action in a vNSF
      description: >-
        <p>TBD. Checks the status of the remote execution of data into a specific vNSF.</p>
      operationId: checkVnsfAction
      produces:
        - application/json
      parameters:
        - in: path
          type: string
          name: vnsf
          description: ID of the vNSF record
          required: true
        - in: path
          type: string
          name: action
          description: ID of the action executed
          required: true
      responses: *API_RESPONSES

  /vnsf/action:
    post:
      tags:
        - vnsf
      summary: Executes pre-defined action from a specific vNSF
      description: >-
        <p>Triggers the remote execution of data into a specific vNSF.</p>
      operationId: executeVnsfAction
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        description: The body of the request
        required: true
        schema:
          $ref: '#/definitions/VnsfActionInput'
      responses:
        200:
          description: "Request succeeded"
          schema:
            $ref: "#/definitions/VnsfActionOutput"
        <<: *API_RESPONSES


definitions:
  ConfigNssOutput:
    type: "array"
    items:
      type: "object"
      required:
        - "ns"
      properties:
        ns:
          type: object
          required:
            - name
            - ns_id
            - vendor_id
          properties:
            name:
              type: "string"
              example: "cirros_2vnf_nsd"
            ns_id:
              type: "string"
              example: "cirros_2vnf_nsd"
            vendor_id:
              type: "string"
              example: "OSM"
  EndPoints:
    type: "object"
    required:
      - "endpoints"
    properties:
      endpoints:
        type: "array"
        items:
          type: "object"
          properties:
            endpoint:
              type: "string"
              example: "/"
            methods:
              type: "array"
              items:
                type: "string"
                example: "GET"

  PackageOnboardedInput:
    type: "object"
    required:
      - path
    properties:
      path:
        type: "string"
        example: "/opt/osm_pkg/cirros_vnf.tar.gz"

  PackageOnboardedOutput:
    type: "object"
    required:
      - package
      - transaction_id
    properties:
      package:
        type: "string"
        example: "/opt/osm_pkg/cirros_vnf.tar.gz"
      transaction_id:
        type: "string"
        example: "fe54b446-0e8e-4041-9d00-c07387aa1804"

  RunningVnsfOutput:
    type: "array"
    items:
      type: "object"
      properties:
        name:
          type: "string"
          example: "mspl__mspl_vnf__2"
        ns_id:
          type: "string"
          example: "84e9676d-a237-4908-86e9-60eb976dae3c"
        vendor:
          type: "string"
          example: "SHIELD"
        vnf_id:
          type: "string"
          example: "ed37f789-9ed8-43bc-8b5f-c4c1ca192363"

  VimRegisterImageInput:
    type: "object"
    required:
      - img_url
      - img_checksum
    properties:
      img_url:
        type: "string"
        example: "..."
      img_checksum:
        type: "string"
        example: "..."

  VimRegisterImageOutput:
    type: "object"
    required:
      - "img_url"
      - "img_checksum"
    properties:
      img_url:
        type: "string"
      img_checksum:
        type: "string"

  VnsfActionInput:
    type: "object"
    required:
      - vnsf_id
      - action
      - params
    properties:
      vnsf_id:
        type: "string"
        example: "afcb3492-f326-4979-acea-fcc47168ca12"
      action:
        type: "string"
        example: "set-policies"
      params:
        type: "object"
        example: {"key": "value"}

  VnsfActionOutput:
    type: "object"
    required:
      - "output"
    properties:
      output:
        type: "object"
        properties:
          create-time:
            type: "string"
            example: "1505647110"
          job-id:
            type: "string"
            example: "1"
          name:
            type: "string"
          nsr_id_ref:
            type: "string"
            example: "e3c04a54-2a4b-4bd7-84d0-f0c024857380"
          triggered-by:
            type: "string"
            example: "ns-primitive"
          vnf-out-list:
            type: "object"
            required:
              - "member_vnf_index_ref"
              - "vnf-out-primitive"
            properties:
              member_vnf_index_ref:
                type: "string"
                example: "1"
              vnf-out-primitive:
                type: "object"
                required:
                  - "execution-error-details"
                  - "execution-id"
                  - "execution-status"
                  - "index"
                  - "name"
                  - "parameter"
                  - "vnfr-id-ref"
                properties:
                  execution-error-details:
                    type: "string"
                    example: ""
                  execution-id:
                    type: "string"
                    example: "action-2ac6e694-b347-411a-839d-fca863b2ea1a"
                  execution-status:
                    type: "string"
                    example: "pending"
                  index:
                    type: "string"
                    example: "0"
                  name:
                    type: "string"
                    example: "set-policies"
                  parameter:
                    type: "object"
                    required:
                      - "name"
                      - "value"
                    properties:
                      name:
                        type: "string"
                        example: "policies"
                      value:
                        type: "string"
                        example: "<xml>data</xml>"
                  vnfr-id-ref:
                    type: "string"
                    example: "afcb3492-f326-4979-acea-fcc47168ca12"

externalDocs:
  description: Find out more about the vNSFO API
  url: 'https://github.com/shield-h2020/vnsfo'
